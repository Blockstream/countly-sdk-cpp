#ifndef COUNTLY_HPP_
#define COUNTLY_HPP_

#include <string>

#define COUNTLY_SDK_VERSION "@COUNTLY_SDK_VERSION@"
#define COUNTLY_POST_THRESHOLD 2000

class Countly {
public:
	Countly();

	~Countly();

	static Countly& getInstance();

	// Do not implicitly generate the copy constructor, this is a singleton.
	Countly(const Countly&) = delete;

	// Do not implicitly generate the copy assignment operator, this is a singleton.
	void operator=(const Countly&) = delete;

	void setLogger(void (*fun)(int level, const char *message));

	#ifdef COUNTLY_USE_CUSTOM_HTTP
	void setHTTPClient(bool (*fun)(bool is_post, const char *url, const char *data));
	#endif

	void start(const std::string& app_key, const std::string& host, int port);

	void startOnCloud(const std::string& app_key);

	void stop();

	enum LogLevel {DEBUG, INFO, WARNING, ERROR, FATAL};
private:
	void log(LogLevel level, const std::string& message);

	bool sendHTTP(const std::string& url, const std::string& data);

	void (*logger_function)(int level, const char *message);

	#ifdef COUNTLY_USE_CUSTOM_HTTP
	bool (*http_client_function)(bool is_post, const char *url, const char *data);
	#endif

	std::string app_key;
	std::string host;
	int port;
};

#endif
